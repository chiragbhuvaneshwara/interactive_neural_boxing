/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace SimpleMosiServer
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TBone : TBase
  {
    private List<string> _children;
    private string _parent;

    public string Name { get; set; }

    public TVector3 Position { get; set; }

    public TQuaternion Rotation { get; set; }

    public List<string> Children
    {
      get
      {
        return _children;
      }
      set
      {
        __isset.children = true;
        this._children = value;
      }
    }

    public string Parent
    {
      get
      {
        return _parent;
      }
      set
      {
        __isset.parent = true;
        this._parent = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool children;
      public bool parent;
    }

    public TBone() {
    }

    public TBone(string name, TVector3 position, TQuaternion rotation) : this() {
      this.Name = name;
      this.Position = position;
      this.Rotation = rotation;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_name = false;
        bool isset_position = false;
        bool isset_rotation = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
                isset_name = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Position = new TVector3();
                Position.Read(iprot);
                isset_position = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Rotation = new TQuaternion();
                Rotation.Read(iprot);
                isset_rotation = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Children = new List<string>();
                  TList _list9 = iprot.ReadListBegin();
                  for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                  {
                    string _elem11;
                    _elem11 = iprot.ReadString();
                    Children.Add(_elem11);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Parent = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_name)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        if (!isset_position)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Position not set");
        if (!isset_rotation)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Rotation not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TBone");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
        if (Position == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Position not set");
        field.Name = "position";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Position.Write(oprot);
        oprot.WriteFieldEnd();
        if (Rotation == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Rotation not set");
        field.Name = "rotation";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Rotation.Write(oprot);
        oprot.WriteFieldEnd();
        if (Children != null && __isset.children) {
          field.Name = "children";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Children.Count));
            foreach (string _iter12 in Children)
            {
              oprot.WriteString(_iter12);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Parent != null && __isset.parent) {
          field.Name = "parent";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Parent);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TBone(");
      __sb.Append(", Name: ");
      __sb.Append(Name);
      __sb.Append(", Position: ");
      __sb.Append(Position);
      __sb.Append(", Rotation: ");
      __sb.Append(Rotation);
      if (Children != null && __isset.children) {
        __sb.Append(", Children: ");
        __sb.Append(Children);
      }
      if (Parent != null && __isset.parent) {
        __sb.Append(", Parent: ");
        __sb.Append(Parent);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
