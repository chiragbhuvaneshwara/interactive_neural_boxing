/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace SimpleMosiServer
{
  public partial class T_simple_directional_motion_server {
    public interface ISync {
      int registerSession();
      TPosture getZeroPosture();
      TPosture fetchFrame(double time, TPosture currentPosture, TVector3 direction, TGait gait, int session_id);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_registerSession(AsyncCallback callback, object state);
      int End_registerSession(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_getZeroPosture(AsyncCallback callback, object state);
      TPosture End_getZeroPosture(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_fetchFrame(AsyncCallback callback, object state, double time, TPosture currentPosture, TVector3 direction, TGait gait, int session_id);
      TPosture End_fetchFrame(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_registerSession(AsyncCallback callback, object state)
      {
        return send_registerSession(callback, state);
      }

      public int End_registerSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registerSession();
      }

      #endif

      public int registerSession()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_registerSession(null, null);
        return End_registerSession(asyncResult);

        #else
        send_registerSession();
        return recv_registerSession();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_registerSession(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("registerSession", TMessageType.Call, seqid_));
        registerSession_args args = new registerSession_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_registerSession()
      {
        oprot_.WriteMessageBegin(new TMessage("registerSession", TMessageType.Call, seqid_));
        registerSession_args args = new registerSession_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public int recv_registerSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerSession_result result = new registerSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerSession failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_getZeroPosture(AsyncCallback callback, object state)
      {
        return send_getZeroPosture(callback, state);
      }

      public TPosture End_getZeroPosture(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getZeroPosture();
      }

      #endif

      public TPosture getZeroPosture()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_getZeroPosture(null, null);
        return End_getZeroPosture(asyncResult);

        #else
        send_getZeroPosture();
        return recv_getZeroPosture();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getZeroPosture(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("getZeroPosture", TMessageType.Call, seqid_));
        getZeroPosture_args args = new getZeroPosture_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_getZeroPosture()
      {
        oprot_.WriteMessageBegin(new TMessage("getZeroPosture", TMessageType.Call, seqid_));
        getZeroPosture_args args = new getZeroPosture_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TPosture recv_getZeroPosture()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getZeroPosture_result result = new getZeroPosture_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getZeroPosture failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_fetchFrame(AsyncCallback callback, object state, double time, TPosture currentPosture, TVector3 direction, TGait gait, int session_id)
      {
        return send_fetchFrame(callback, state, time, currentPosture, direction, gait, session_id);
      }

      public TPosture End_fetchFrame(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_fetchFrame();
      }

      #endif

      public TPosture fetchFrame(double time, TPosture currentPosture, TVector3 direction, TGait gait, int session_id)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_fetchFrame(null, null, time, currentPosture, direction, gait, session_id);
        return End_fetchFrame(asyncResult);

        #else
        send_fetchFrame(time, currentPosture, direction, gait, session_id);
        return recv_fetchFrame();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_fetchFrame(AsyncCallback callback, object state, double time, TPosture currentPosture, TVector3 direction, TGait gait, int session_id)
      {
        oprot_.WriteMessageBegin(new TMessage("fetchFrame", TMessageType.Call, seqid_));
        fetchFrame_args args = new fetchFrame_args();
        args.Time = time;
        args.CurrentPosture = currentPosture;
        args.Direction = direction;
        args.Gait = gait;
        args.Session_id = session_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_fetchFrame(double time, TPosture currentPosture, TVector3 direction, TGait gait, int session_id)
      {
        oprot_.WriteMessageBegin(new TMessage("fetchFrame", TMessageType.Call, seqid_));
        fetchFrame_args args = new fetchFrame_args();
        args.Time = time;
        args.CurrentPosture = currentPosture;
        args.Direction = direction;
        args.Gait = gait;
        args.Session_id = session_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TPosture recv_fetchFrame()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        fetchFrame_result result = new fetchFrame_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchFrame failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["registerSession"] = registerSession_Process;
        processMap_["getZeroPosture"] = getZeroPosture_Process;
        processMap_["fetchFrame"] = fetchFrame_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void registerSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerSession_args args = new registerSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerSession_result result = new registerSession_result();
        try
        {
          result.Success = iface_.registerSession();
          oprot.WriteMessageBegin(new TMessage("registerSession", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("registerSession", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getZeroPosture_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getZeroPosture_args args = new getZeroPosture_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getZeroPosture_result result = new getZeroPosture_result();
        try
        {
          result.Success = iface_.getZeroPosture();
          oprot.WriteMessageBegin(new TMessage("getZeroPosture", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getZeroPosture", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void fetchFrame_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        fetchFrame_args args = new fetchFrame_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        fetchFrame_result result = new fetchFrame_result();
        try
        {
          result.Success = iface_.fetchFrame(args.Time, args.CurrentPosture, args.Direction, args.Gait, args.Session_id);
          oprot.WriteMessageBegin(new TMessage("fetchFrame", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("fetchFrame", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerSession_args : TBase
    {

      public registerSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("registerSession_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("registerSession_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerSession_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public registerSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("registerSession_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("registerSession_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getZeroPosture_args : TBase
    {

      public getZeroPosture_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getZeroPosture_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getZeroPosture_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getZeroPosture_result : TBase
    {
      private TPosture _success;

      public TPosture Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getZeroPosture_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TPosture();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getZeroPosture_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getZeroPosture_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fetchFrame_args : TBase
    {
      private double _time;
      private TPosture _currentPosture;
      private TVector3 _direction;
      private TGait _gait;
      private int _session_id;

      public double Time
      {
        get
        {
          return _time;
        }
        set
        {
          __isset.time = true;
          this._time = value;
        }
      }

      public TPosture CurrentPosture
      {
        get
        {
          return _currentPosture;
        }
        set
        {
          __isset.currentPosture = true;
          this._currentPosture = value;
        }
      }

      public TVector3 Direction
      {
        get
        {
          return _direction;
        }
        set
        {
          __isset.direction = true;
          this._direction = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="TGait"/>
      /// </summary>
      public TGait Gait
      {
        get
        {
          return _gait;
        }
        set
        {
          __isset.gait = true;
          this._gait = value;
        }
      }

      public int Session_id
      {
        get
        {
          return _session_id;
        }
        set
        {
          __isset.session_id = true;
          this._session_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool time;
        public bool currentPosture;
        public bool direction;
        public bool gait;
        public bool session_id;
      }

      public fetchFrame_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Double) {
                  Time = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  CurrentPosture = new TPosture();
                  CurrentPosture.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Direction = new TVector3();
                  Direction.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  Gait = (TGait)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  Session_id = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("fetchFrame_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.time) {
            field.Name = "time";
            field.Type = TType.Double;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Time);
            oprot.WriteFieldEnd();
          }
          if (CurrentPosture != null && __isset.currentPosture) {
            field.Name = "currentPosture";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            CurrentPosture.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Direction != null && __isset.direction) {
            field.Name = "direction";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Direction.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.gait) {
            field.Name = "gait";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Gait);
            oprot.WriteFieldEnd();
          }
          if (__isset.session_id) {
            field.Name = "session_id";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Session_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("fetchFrame_args(");
        bool __first = true;
        if (__isset.time) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Time: ");
          __sb.Append(Time);
        }
        if (CurrentPosture != null && __isset.currentPosture) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CurrentPosture: ");
          __sb.Append(CurrentPosture== null ? "<null>" : CurrentPosture.ToString());
        }
        if (Direction != null && __isset.direction) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Direction: ");
          __sb.Append(Direction== null ? "<null>" : Direction.ToString());
        }
        if (__isset.gait) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Gait: ");
          __sb.Append(Gait);
        }
        if (__isset.session_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session_id: ");
          __sb.Append(Session_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fetchFrame_result : TBase
    {
      private TPosture _success;

      public TPosture Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public fetchFrame_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TPosture();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("fetchFrame_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("fetchFrame_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
