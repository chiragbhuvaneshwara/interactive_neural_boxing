/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace SimpleMosiServer
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TPosture : TBase
  {

    public List<TBone> Bones { get; set; }

    public Dictionary<string, int> Bone_map { get; set; }

    public TVector3 Location { get; set; }

    public double Rotation { get; set; }

    public TPosture() {
    }

    public TPosture(List<TBone> bones, Dictionary<string, int> bone_map, TVector3 location, double rotation) : this() {
      this.Bones = bones;
      this.Bone_map = bone_map;
      this.Location = location;
      this.Rotation = rotation;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_bones = false;
        bool isset_bone_map = false;
        bool isset_location = false;
        bool isset_rotation = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Bones = new List<TBone>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    TBone _elem2;
                    _elem2 = new TBone();
                    _elem2.Read(iprot);
                    Bones.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
                isset_bones = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Bone_map = new Dictionary<string, int>();
                  TMap _map3 = iprot.ReadMapBegin();
                  for( int _i4 = 0; _i4 < _map3.Count; ++_i4)
                  {
                    string _key5;
                    int _val6;
                    _key5 = iprot.ReadString();
                    _val6 = iprot.ReadI32();
                    Bone_map[_key5] = _val6;
                  }
                  iprot.ReadMapEnd();
                }
                isset_bone_map = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Location = new TVector3();
                Location.Read(iprot);
                isset_location = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                Rotation = iprot.ReadDouble();
                isset_rotation = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_bones)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Bones not set");
        if (!isset_bone_map)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Bone_map not set");
        if (!isset_location)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Location not set");
        if (!isset_rotation)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Rotation not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TPosture");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Bones == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Bones not set");
        field.Name = "bones";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Bones.Count));
          foreach (TBone _iter7 in Bones)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        if (Bone_map == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Bone_map not set");
        field.Name = "bone_map";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I32, Bone_map.Count));
          foreach (string _iter8 in Bone_map.Keys)
          {
            oprot.WriteString(_iter8);
            oprot.WriteI32(Bone_map[_iter8]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
        if (Location == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Location not set");
        field.Name = "location";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Location.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "rotation";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Rotation);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TPosture(");
      __sb.Append(", Bones: ");
      __sb.Append(Bones);
      __sb.Append(", Bone_map: ");
      __sb.Append(Bone_map);
      __sb.Append(", Location: ");
      __sb.Append(Location);
      __sb.Append(", Rotation: ");
      __sb.Append(Rotation);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
